/*				«ПОДСЧЕТ СУММЫ ЭЛЕМЕНТОВ МАССИВА»
-----------------------------------------------------------------------------------
Задача: реализуйте подсчёт суммы элементов массива несколькими потоками.
- Массив случайных чисел размером N должен разбиваться на M равных частей(M < N),
каждая из которых выполняется в отдельном потоке.
- Каждый поток вычисляет сумму элементов своей части.
- По завершении выполнения потоков, вычисляется общая сумма массива.
-----------------------------------------------------------------------------------
Входные переменные :
	N — размер массива;
	M — количество частей, на которые будет разбит массив.
Результат: сумма элементов массива.
-----------------------------------------------------------------------------------
Для понимания подробно рассмотрим эту задачу на примере.
Дано :
	N = 20
	M = 4
Решение :
Генерируем массив случайных чисел : 5 3 2 4 8 9 6 1 1 7 9 3 8 2 6 3 5 5 4 7
Разбиваем массив на 4 части :
	1 - ая часть : 5 3 2 4 8
	2 - ая часть : 9 6 1 1 7
	3 - ая часть : 9 3 8 2 6
	4 - ая часть : 3 5 5 4 7
Создаем 4 потока, каждый из которых вычисляет сумму элементов своей части.
Ожидаем завершения выполнения всех потоков:
	1 - ый поток вернёт значение 22.
	2 - ой поток вернёт значение 24.
	3 - ий поток вернёт значение 28.
	4 - ый поток вернёт значение 24.
Вычисляем итоговую сумму всех частей массива : 22 + 24 + 28 + 24 = 98.
Результат будет равен 98.
-----------------------------------------------------------------------------------
*/

#include <algorithm>
#include <vector>
#include <thread>
#include <iostream>
#include <ctime>
#include <chrono>   // для получения времени
#include <windows.h>


int calc_sum(int N, int M, int num, std::vector<int> arr)
{
	int res = 0;
	int count = (int)(N / M);
	int start = num * count;
	int end = start + count;
	if (end > N) {
		end = N;
	}
	for (auto i = start; i < end; i++) {
		res += arr[i];
	}
	return res;
}


int main()
{
	std::size_t N = 0;//20;
	std::cout << "Input array size: ";
	std::cin >> N;

	std::size_t M = 0;
	std::cout << "Input count of array parts: ";
	std::cin >> M;

	// генерируем массив случайных целых чисел ---------------------------------------------
	std::vector<int> arr(N);
	int i;

	// инициализация генерации случайных чисел
	srand(time(0)); 

	// генерируем целый случайный массив из 10 эелментов от 1 до 10
	for (i = 0; i < N; i++)
		arr[i] = 1 + rand() % 9;

	//// вывод результата на экране
	//std::cout << "Array: ";
	//for (i = 0; i < N; i++)
	//	std::cout << arr[i] << " ";
	//std::cout << std::endl;

	// -------------------------------------------------------------------------------------
	auto start = std::chrono::high_resolution_clock::now(); // сохраняем время начала работы алгоритма
	std::vector<std::thread> threads;	
	std::vector<int> sum_arr(M);

	for (i = 0; i < M; i++) {
		// Иногда необходимо в поток передать функцию, возвращающую какое-то значение, 
		// для этого удобно использовать лямбда-функции и в них получать возвращаемое значение.
		// По сути мы создаем лямбда-функцию, внутри которой вызываем функцию calc_sum
		// и ждем ее результата, который по указателю записываем в переменную sum_arr.
		std::thread t([&sum_arr, N, M, i, arr]() {sum_arr[i] = calc_sum(N, M, i, arr); });

		threads.push_back(std::move(t));
	}
	std::for_each(threads.begin(), threads.end(), [](std::thread& t)
		{ t.join(); });

	int sum = 0;
	for (i = 0; i < M; i++) {
		sum += sum_arr[i];
	}
	std::cout << "SUM(elements) = " << sum << std::endl;

	auto finish = std::chrono::high_resolution_clock::now(); // сохраняем время конца работы алгоритма
	std::chrono::duration<double> elapsed = finish - start;
	std::cout << "Elapsed time [ count thread = " << M << " ] : " << elapsed.count() << " sec" << std::endl; // вычисляем продолжительность работы в сек. и выводим на экран

	// -------------------------------------------------------------------------------------
	// количество ядер процессора
	SYSTEM_INFO sysinfo;
	GetSystemInfo(&sysinfo);
	int numCPU = sysinfo.dwNumberOfProcessors;
	std::cout << "Processor cores count = " << numCPU << std::endl;

	return 0;
}